<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <style>
        body {
            background-color: #000000;
            margin: 0px;
            overflow: hidden;
            font-family:Monospace;
            font-size:13px;
            text-align:center;
            font-weight: bold;
            text-align:center;
        }

        a {
            color:#0078ff;
        }

        #info {
            color: #fff;
            position: absolute;
            width: 100%;
            padding-top: 40vh;
            z-index: 100;
        }

        #backToSafety {
            color: #fff;
            position: absolute;
            width: 100%;
            padding-top: 55vh;
            z-index: 100;
        }

        #safetyLink {
            border: 50px black solid;
            border-radius: 40%;
        }

        .madness {
            color: #f35626;
            background-image: -webkit-linear-gradient(92deg,#f35626,#feab3a);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            -webkit-animation: hue 60s infinite linear;
        }

        @-webkit-keyframes hue {
            from {
                -webkit-filter: hue-rotate(0deg);
            }

            to {
                -webkit-filter: hue-rotate(360deg);
            }
        }

    </style>
</head>
<body>
<div class="container">
    <div class="row">
        <div class="col-md-6" style="margin: 0 auto;">
            <h1 id="info">It looks like you've fallen into the void...</h1>
            <h2 class="madness" id="backToSafety"><a id="safetyLink" href="/">Sweet Cthulu! I'm Scared! Take Me Home!</a></h2>
        </div>
    </div>
</div>
<script src="/js/threeJS/build/three.js"></script>
<script src="/js/threeJS/support/Detector.js"></script>
<script src="/js/threeJS/support/stats.min.js"></script>

<script>
    if (!Detector.webgl) Detector.addGetWebGLMessage();
    let container, stats,
        camera, scene, renderer, particles, geometry, materials = [], parameters, i, h, color, size,
        mouseX = 0, mouseY = 0,
        windowHalfX = window.innerWidth / 2,
        windowHalfY = window.innerHeight / 2;

    init();
    animate();

    function init() {
        container = document.createElement('div');
        document.body.appendChild(container);
        camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 1, 3000);
        camera.position.z = 1000;
        scene = new THREE.Scene();
        scene.fog = new THREE.FogExp2(0x000000, 0.0007);
        geometry = new THREE.Geometry();

        for (let i = 0; i < 20000; i += 1) {
            let vertex = new THREE.Vector3();
            vertex.x = Math.random() * 2000 - 1000;
            vertex.y = Math.random() * 2000 - 1000;
            vertex.z = Math.random() * 2000 - 1000;
            geometry.vertices.push(vertex);
        }

        parameters = [
            [
                [1, 1, 0.5],
                5
            ],
            [
                [0.95, 1, 0.5],
                4
            ],
            [
                [0.90, 1, 0.5],
                3
            ],
            [
                [0.85, 1, 0.5],
                2
            ],
            [
                [0.80, 1, 0.5],
                1
            ]
        ];

        for (let i = 0; i < parameters.length; i += 1) {
            color = parameters[i][0];
            size  = parameters[i][1];
            materials[i] = new THREE.PointsMaterial({size: size});
            particles = new THREE.Points(geometry, materials[i]);
            particles.rotation.x = Math.random() * 6;
            particles.rotation.y = Math.random() * 6;
            particles.rotation.z = Math.random() * 6;
            scene.add(particles);
        }

        renderer = new THREE.WebGLRenderer();
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        container.appendChild(renderer.domElement);
        stats = new Stats();
        container.appendChild(stats.dom);
        document.addEventListener('mousemove', onDocumentMouseMove, false);
        document.addEventListener('touchstart', onDocumentTouchStart, false);
        document.addEventListener('touchmove', onDocumentTouchMove, false);
        //
        window.addEventListener('resize', onWindowResize, false);
    }

    function onWindowResize() {
        windowHalfX = window.innerWidth/2;
        windowHalfY = window.innerHeight/2;
        camera.aspect = window.innerWidth/window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function onDocumentMouseMove(event) {
        mouseX = event.clientX - windowHalfX;
        mouseY = event.clientY - windowHalfY;
    }

    function onDocumentTouchStart(event) {
        if (event.touches.length === 1) {
            event.preventDefault();
            mouseX = event.touches[0].pageX - windowHalfX;
            mouseY = event.touches[0].pageY - windowHalfY;
        }
    }

    function onDocumentTouchMove(event) {
        if (event.touches.length === 1) {
            event.preventDefault();
            mouseX = event.touches[0].pageX - windowHalfX;
            mouseY = event.touches[0].pageY - windowHalfY;
        }
    }

    //
    function animate() {
        requestAnimationFrame(animate);
        render();
        stats.update();
    }

    function render() {
        let time = Date.now() * 0.00005;
        camera.position.x += (mouseX - camera.position.x) * 0.05;
        camera.position.y += (-mouseY - camera.position.y) * 0.05;
        camera.lookAt(scene.position);
        for (let i = 0; i < scene.children.length; i += 1) {
            let object = scene.children[i];
            if (object instanceof THREE.Points) {
                object.rotation.y = time * ((i < 4) ? (i + 1) : -( i + 1 ));
            }
        }

        for (let i = 0; i < materials.length; i += 1) {
            color = parameters[i][0];
            h = (360 * (color[0] + time) % 360)/360;
            materials[i].color.setHSL(h, color[1], color[2]);
        }
        renderer.render(scene, camera);
    }
</script>
</body>
</html>