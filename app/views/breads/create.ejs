<% include ./../partials/header %>
<script>
    /*Self Defined ProtoTypes*/
    Element.prototype.appendMeBefore = function(element) {
        element.parentNode.insertBefore(this, element);
    }, false;
    Element.prototype.appendMeAfter = function(element) {
        element.parentNode.insertBefore(this, element.nextSibling);
    }, false;

    /*Script Functions*/
    function reButton() {
        //by using just the component, I need to cycle through the buttons and re ID them....Challenge accepted.
        console.log('ReButton Called...');
        $('#directionsPanel').find('.cmp').each(function(i, input) {
            let iId = (input.id).replace(/\D/g, ''),
                btns = $('#' + input.id);
            $('#'.concat(btns[0].id)).find('button').each(function(y, yN) {
                yN.id = (yN.id).replace(/\d+/,'').concat(iId);
            });
            if (i > 0) {
                let bIA = '#'.concat('aC', i),
                    bID = '#'.concat('rC', i);
                $(bIA).removeClass('hidden');
                $(bID).removeClass('hidden');
            }
        });
        /*console.log('component given is: ',  cmp);
        let b = 'button',
            h = 'hidden',
            ash = '#',
            bAC = 'aC',
            bAR = 'rC';
        cmp.find(b).each(function (i, input) {
            console.log('input id is: ', input.id);
        });

        if (c >= 0) {
            let bIA = ash.concat(bAC, c),
                bID = ash.concat(bAR, c);
            $(bIA).addClass(h);
            $(bID).removeClass(h);
        }*/
    }

    function resetFields(rSO) {
        let rSection =  $(rSO.repeatingSection),
            nodeLength = rSection[0].childElementCount - 1; //index adjustment
        rSection.find(rSO.sectionComponents[0]).each(function(index, div) {
            div.id = rSO.sectionComponents[1].concat(index);
            let child = $(rSO.sectionComponents[2].concat(index));
            console.log('child: ', child);
            child.find(rSO.sectionComponents[3]).each(function(sIndex, label) {
                let lAttr = $(label).attr('for'),
                    i = lAttr.lastIndexOf('_'),
                    newAttr = lAttr
                        .substr(0, i)
                        .concat('_', index);
                $(label).attr('for', newAttr);
            });
            child.find(rSO.sectionComponents[4]).each(function(sIndex, input) {
                let oldId = input.id,
                    iId = oldId.lastIndexOf('_');
                input.id = oldId.substr(0, iId).concat('_', index);
            });
            console.log('child: ', child);
                console.log('old button id: ', button.id);
                let oldId = button.id,
                    iId = oldId.lastIndexOf('_');
                button.id = oldId.substr(0, iId).concat('_', index);
                console.log('new button id: ', button.id);
                console.log(rSO.sectionComponents[5].concat(index))
                console.log(rSO.sectionComponents[6].concat(index))
                if (index < nodeLength) {
                    $(rSO.sectionComponents[5].concat(index)).addClass(rSO.sectionComponents[7]);
                    $(rSO.sectionComponents[6].concat(index)).removeClass(rSO.sectionComponents[7]);
                } else if (index === nodeLength) {
                    $(rSO.sectionComponents[5].concat(index)).removeClass(rSO.sectionComponents[7]);
                    $(rSO.sectionComponents[6].concat(index)).addClass(rSO.sectionComponents[7]);
                }
        });
    }

    function removeItem(tid, rSO) {
        let item = tid.replace(/remove/, ''),
            firstChar = item.charAt(0).toLowerCase(),
            str = item.substring(1),
            finItem = '#'.concat(firstChar, str);
        $(finItem).remove();
        resetFields(rSO);
    }

    function cloneItem(itemToClone, groupToRepeat) {
        let currentCount =  $(itemToClone)[0].childElementCount - 1,
            newCount = currentCount + 1,
            lastRepeatingGroup = $(groupToRepeat.concat(currentCount)).last(),
            newSection = lastRepeatingGroup.clone(),
            delimiter = '_';

        newSection[0].id = newSection[0].id.replace(delimiter.concat(currentCount), delimiter.concat(newCount));
        newSection.insertAfter(lastRepeatingGroup);

        newSection.find("label").each(function (index, label) {
            let l = $(label);
            l.attr('for', l.attr('for')
                .replace(delimiter.concat(currentCount), delimiter.concat(newCount))
            );
        });

        if (groupToRepeat === '#item_') {
            newSection.find("input").each(function (index, input) {
                input.id = input.id.replace(delimiter.concat(currentCount), delimiter.concat(newCount));
                input.value = '';
            });
        }

        newSection.find("button").each(function (index, input) {
            input.id = input.id.replace(delimiter.concat(currentCount), delimiter.concat(newCount));
        });

        if (groupToRepeat === '#item_') {
            $('#addItem'.concat(delimiter, currentCount)).addClass('hidden');
            $('#removeItem'.concat(delimiter, currentCount)).removeClass('hidden');
        } else if (groupToRepeat === '#step_') {
            $('#addStep'.concat(delimiter, currentCount)).addClass('hidden');
            $('#removeStep'.concat(delimiter, currentCount)).removeClass('hidden');
        }
    }

    function relabel() {
        let component = '.cmp',
            iRoot = 'cId',
            elemArr = $(component);
        for (let i = 0; i < elemArr.length; i += 1) {
            elemArr[i].id = iRoot.concat(i);
        }
    }

    function dup(rS, rERI, rEC, ob) {
        console.log(rS, rERI, rEC, ob.id);
      let cc =  $(rS)[0].childElementCount - 1,
          ci = $(rS)[0].childElementCount - 1,
          nC = cc + 1,
          lRG = $(rEC).last(),
          nS = lRG.clone(true),
          cD = rERI.concat(cc),
          cN = $(cD),
          buttonPressed = (ob.id).replace(/\D/g, '');
      nS[0].id = nS[0].id.replace(cc, nC);
      console.log(buttonPressed === ci);
      if (parseInt(buttonPressed) === ci) {
          console.log('Insert Component After', 'cN: ', cN);
          console.log(nS);
          cN[0].parentNode.insertBefore(nS[0], cN[0]);
      } else {
          console.log('buttonPressed was: ', buttonPressed);
          console.log('The current instance count is: ', ci);
          console.log('Insert the component at: ', parseInt(buttonPressed)+1);
          //cN[0].parentNode.insertBefore(nS[0], cN[0].nextSibling);
      }


        // Create Button Identifiers
        reButton(nS, cc, nC);
    }

    function dedup(rSId) {
        console.log('button id pressed is: ', rSId);
        let elem = '#cId'.concat(rSId);
        $(elem).remove();
        relabel();
        reButton($('.cmp'), rSId, rSId-1);
    }
</script>
<div class="container">
    <div class="row">
        <div class="col-md-12" style="background-color: rgba(156,149,131,0.9); border-radius: 15px;">
            <h1 style="text-align: center; padding-top: 20px;">Add A New Bread!</h1>
            <form action="/breads" method="post">
                <div class="tab">
                    <% include formPieces/recipeForm %>
                </div>
                <div class="tab">
                    <% include formPieces/ingredientForm.ejs %>
                </div>
                <div class="tab">
                    <% include formPieces/directionForm.ejs %>
                </div>
                <div class="col-md-12" style="overflow:auto;">
                    <div style="float: right">
                        <button class="btn" type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                        <button class="btn" type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    </div>
                </div>
                <div style="text-align:center;margin-top:40px;">
                    <span class="step"></span>
                    <span class="step"></span>
                    <span class="step"></span>
                </div>
            </form>
        </div>
    </div>
</div>
<link rel="stylesheet" href="/css/createBreadForm.css">
<script type="text/javascript">
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the current tab

    function showTab(n) {
        // This function will display the specified tab of the form ...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        // ... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        // ... and run a function that displays the correct step indicator:
        fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n == 1 && !validateForm()) return false;
        // Hide the current tab:
        x[currentTab].style.display = "none";
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;
        // if you have reached the end of the form... :
        if (currentTab >= x.length) {
            //...the form gets submitted:
            document.getElementById("regForm").submit();
            return false;
        }
        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm() {
        // This function deals with validation of the form fields
        var x, y, i, valid = true;
        x = document.getElementsByClassName("tab");
        y = x[currentTab].getElementsByTagName("input");
        // A loop that checks every input field in the current tab:
        for (i = 0; i < y.length; i++) {
            // If a field is empty...
            if (y[i].value == "") {
                // add an "invalid" class to the field:
                y[i].className += " invalid";
                // and set the current valid status to false:
                valid = false;
            }
        }
        // If the valid status is true, mark the step as finished and valid:
        if (valid) {
            document.getElementsByClassName("step")[currentTab].className += " finish";
        }
        return valid; // return the valid status
    }

    function fixStepIndicator(n) {
        // This function removes the "active" class of all steps...
        var i, x = document.getElementsByClassName("step");
        for (i = 0; i < x.length; i++) {
            x[i].className = x[i].className.replace(" active", "");
        }
        //... and adds the "active" class to the current step:
        x[n].className += " active";
    }
</script>
<% var sf = true; %>
<% include ./../partials/footer %>